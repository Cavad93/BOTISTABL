import logging
import json
import requests
from datetime import datetime

logger = logging.getLogger(__name__)

class Notifier:
    def __init__(self, config, data_manager=None, resistance_analyzer=None):
        self.cfg = config
        self.enabled = bool(self.cfg.TG_BOT_TOKEN and self.cfg.TG_CHAT_ID)
        self._base = f"https://api.telegram.org/bot{self.cfg.TG_BOT_TOKEN}"
        self._timeout = 10
        # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤/—á–µ–∫-–ª–∏—Å—Ç–æ–≤
        self.data_manager = data_manager
        self.resistance_analyzer = resistance_analyzer

    def _send_tg(self, text: str):
        if not self.enabled:
            return
        try:
            resp = requests.post(
                f"{self._base}/sendMessage",
                json={"chat_id": self.cfg.TG_CHAT_ID, "text": text},
                timeout=self._timeout
            )
            if not resp.ok:
                logger.warning(f"Telegram sendMessage error: {resp.status_code} {resp.text}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {e}")

    # –Ω–æ–≤—ã–µ —É–¥–æ–±–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    def startup(self):
        self._send_tg("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    def shutdown(self):
        self._send_tg("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def market_summary(self, summary: dict):
        lines = [
            "üìä –°–í–û–î–ö–ê –ü–û –†–´–ù–ö–£",
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {summary.get('total_analyzed')}",
            f"–° —É—Ä–æ–≤–Ω—è–º–∏: {summary.get('coins_with_levels')}",
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤: {summary.get('active_breakouts')}",
            f"–°–∏–ª–∞ —Ä—ã–Ω–∫–∞: {summary.get('market_strength')}",
        ]
        top = summary.get('top_opportunities') or []
        if top:
            lines.append("üéØ –¢–û–ü –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
            for i, opp in enumerate(top[:5], 1):
                p = opp.get('arf_proba')
                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –≥–¥–µ-—Ç–æ –ø—Ä–æ–∫–∞—Ç–∏—Ç—Å—è
                if p is None:
                    p = (opp.get('breakout_info') or {}).get('arf_proba')

                if p is not None:
                    lines.append(f"{i}. {opp['symbol']} ({opp['timeframe']}) - ARF p={float(p):.3f}, Action: {opp['action']}")
                else:
                    lines.append(f"{i}. {opp['symbol']} ({opp['timeframe']}) - Score: {opp['score']:.1f}, Action: {opp['action']}")
        self._send_tg("\n".join(lines))

    # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–π–¥-—Å–æ–±—ã—Ç–∏—è
    def notify_trade_opened(self, pos):
        self._send_tg(f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {pos.symbol} @ {pos.entry_price:.6f}, qty={pos.qty}")

    def notify_partial_tp(self, pos, threshold: float, qty: float, price: float):
        self._send_tg(f"‚öñÔ∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π TP {pos.symbol}: {qty} @ +{threshold*100:.1f}% (—Ü–µ–Ω–∞ {price:.6f})")

    def notify_trailing(self, pos):
        self._send_tg(f"üîß –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ–¥—Ç—è–Ω—É—Ç {pos.symbol}: SL={pos.stop_loss:.6f}")

    def _send_tg_photo(self, caption: str, photo_bytes: bytes, filename: str = "chart.png"):
        if not self.enabled:
            return
        try:
            resp = requests.post(
                f"{self._base}/sendPhoto",
                data={"chat_id": self.cfg.TG_CHAT_ID, "caption": caption},
                files={"photo": (filename, photo_bytes, "image/png")},
                timeout=self._timeout
            )
            resp.raise_for_status()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram")

    def _send_tg_media_group(self, images: list[bytes], caption_for_first: str = ""):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞: –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–ø–∏—Å—å (—Å–≤–æ–¥–∫–∞).
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ sendMediaGroup + attach://file_name (–æ—Ñ. –ø—Ä–æ—Ç–æ–∫–æ–ª).
        """
        if not self.enabled or not images:
            return
        try:
            media = []
            files = {}
            for i, img in enumerate(images):
                name = f"photo{i}.png"
                media.append({
                    "type": "photo",
                    "media": f"attach://{name}",
                    **({"caption": caption_for_first} if i == 0 and caption_for_first else {})
                })
                files[name] = (name, img, "image/png")

            resp = requests.post(
                f"{self._base}/sendMediaGroup",
                data={
                    "chat_id": self.cfg.TG_CHAT_ID,
                    "media": json.dumps(media, ensure_ascii=False)
                },
                files=files,
                timeout=self._timeout
            )
            resp.raise_for_status()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ –≤ Telegram")

    def market_summary_with_charts(self, summary_text: str, chart_images: list[bytes]):
        """
        summary_text ‚Äî –≥–æ—Ç–æ–≤–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ (–∫–∞–∫ —É –≤–∞—Å –≤ main.py —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å)
        chart_images ‚Äî —Å–ø–∏—Å–æ–∫ PNG-–±–∞–π—Ç–æ–≤ (–¥–æ 10 —à—Ç—É–∫; –≤ Telegram –ª–∏–º–∏—Ç –∞–ª—å–±–æ–º–∞).
        –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º —Ç–µ–∫—Å—Ç.
        """
        if not chart_images:
            self._send_tg(summary_text)
        else:
            # –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî —Å –ø–æ–¥–ø–∏—Å—å—é; –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –±–µ–∑
            self._send_tg_media_group(chart_images, caption_for_first=summary_text)

# –°–¢–ê–õ–û (–¥–æ–±–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–æ–µ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º –∏ ARF)
    def notify_closed(self, pos, reason: str):
        self._send_tg(f"üîî –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {pos.symbol}: {reason}")

    def notify_breakout_conditions(self, info: dict):
        if not self.enabled:
            return

        def _fmt_bool(ok: bool) -> str:
            return "‚úÖ" if ok else "‚ùå"

        conds = info.get("conditions", {})
        cc = conds.get("close_above_level", {})
        vc = conds.get("volume_surge", {})
        rc = conds.get("rsi", {})
        kc = conds.get("confirmation_candles", {})

        lines: List[str] = [
            f"üö® –ü–†–û–ë–û–ô: {info.get('symbol')} {info.get('timeframe','')}".strip(),
            f"–£—Ä–æ–≤–µ–Ω—å: {info.get('level_price'):.6f}  ‚Üí  –ü—Ä–æ–±–æ–π @ {info.get('breakout_price'):.6f}",
            f"–°–∏–ª–∞ —É—Ä–æ–≤–Ω—è: {info.get('level_strength')}",
        ]

        p = info.get("arf_proba")
        if p is not None:
            try:
                lines.append(f"ü§ñ ARF p = {float(p):.3f}")
            except Exception:
                from error_logger import log_exception
                log_exception("Unhandled exception")

        lines += [
            "‚Äî –£—Å–ª–æ–≤–∏—è:",
            f"{_fmt_bool(cc.get('passed', False))} –ó–∞–∫—Ä—ã—Ç–∏–µ > —É—Ä–æ–≤–Ω—è+Œî   "
            f"(close={cc.get('close'):.6f}; Œî={cc.get('delta_pct'):.4f}; –ø–æ—Ä–æ–≥>{cc.get('threshold_pct'):.4f})",
            f"{_fmt_bool(vc.get('passed', False))} –û–±—ä—ë–º > —Å—Ä–µ–¥–Ω√ómult    "
            f"({vc.get('current'):.2f}/{vc.get('average'):.2f}; mult√ó{vc.get('multiplier'):.2f})",
            f"{_fmt_bool(rc.get('passed', False))} RSI ‚â• –ø–æ—Ä–æ–≥–∞          "
            f"({rc.get('value'):.2f} ‚â• {rc.get('threshold')})",
            f"{_fmt_bool(kc.get('passed', False))} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π "
            f"{kc.get('count_ok')}/{kc.get('required')}",
        ]

        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –ø—Ä–∏ —á–µ–∫-–ª–∏—Å—Ç–µ ‚Äî –†–ï–ê–õ–ò–ó–û–í–ê–ù–û
        try:
            from charting import render_level_chart
            symbol = info.get("symbol")
            timeframe = info.get("timeframe", "15m")

            if symbol and self.data_manager is not None and self.resistance_analyzer is not None:
                # —Ç—è–Ω–µ–º –∏—Å—Ç–æ—Ä–∏—é
                min_days = getattr(self.cfg, "MIN_HISTORY_DAYS", 7)
                df = self.data_manager.fetch_klines_full(symbol, timeframe, min_days)
                if df is not None and not df.empty:
                    # –≤—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–Ω–∏
                    levels_info = self.resistance_analyzer.find_resistance_levels(df, symbol)
                    if isinstance(levels_info, dict):
                        levels = (
                            levels_info.get('combined')
                            or levels_info.get('historical_peaks')
                            or levels_info.get('horizontal_zones')
                            or []
                        )
                    else:
                        levels = []

                    breakout_info = {
                        "breakout_price": (
                            info.get("breakout_price") or
                            info.get("breakout_price_at") or
                            info.get("price")
                        ),
                        "ts": info.get("ts") or info.get("time")
                    }
                    img_bytes = render_level_chart(
                        df=df,
                        levels=levels,
                        symbol=symbol,
                        timeframe=timeframe,
                        breakout=breakout_info,
                        max_bars=max_bars,
                    )

                    # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å (–ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ —É Telegram ~1024 —Å–∏–º–≤–æ–ª–∞)
                    caption = f"üìå {symbol} ({timeframe}) ‚Äî —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–±–æ—è"
                    self._send_tg_photo(caption=caption, photo_bytes=img_bytes, filename=f"{symbol}_{timeframe}_breakout.png")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞")

        self._send_tg("\n".join(lines))

    def notify_breakdown_conditions(self, info: dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–ù–ò–ó (–¥–ª—è SHORT)"""
        if not self.enabled:
            return

        def _fmt_bool(ok: bool) -> str:
            return "‚úÖ" if ok else "‚ùå"

        conds = info.get("conditions", {})
        cc = conds.get("close_below_level", {})
        vc = conds.get("volume_surge", {})
        rc = conds.get("rsi", {})
        kc = conds.get("confirmation_candles", {})

        lines: List[str] = [
            f"üö® –ü–†–û–ë–û–ô –í–ù–ò–ó (SHORT): {info.get('symbol')} {info.get('timeframe','')}".strip(),
            f"–£—Ä–æ–≤–µ–Ω—å: {info.get('level_price'):.6f}  ‚Üí  –ü—Ä–æ–±–æ–π @ {info.get('breakdown_price'):.6f}",
            f"–°–∏–ª–∞ —É—Ä–æ–≤–Ω—è: {info.get('level_strength')}",
        ]

        p = info.get("arf_proba")
        if p is not None:
            try:
                lines.append(f"ü§ñ ARF SHORT p = {float(p):.3f}")
            except Exception:
                pass

        lines += [
            "‚Äî –£—Å–ª–æ–≤–∏—è:",
            f"{_fmt_bool(cc.get('passed', False))} –ó–∞–∫—Ä—ã—Ç–∏–µ < —É—Ä–æ–≤–Ω—è-Œî   "
            f"(close={cc.get('close'):.6f}; Œî={cc.get('delta_pct'):.4f}; –ø–æ—Ä–æ–≥>{cc.get('threshold_pct'):.4f})",
            f"{_fmt_bool(vc.get('passed', False))} –û–±—ä—ë–º > —Å—Ä–µ–¥–Ω√ómult    "
            f"({vc.get('current'):.2f}/{vc.get('average'):.2f}; mult√ó{vc.get('multiplier'):.2f})",
            f"{_fmt_bool(rc.get('passed', False))} RSI ‚â§ –ø–æ—Ä–æ–≥–∞          "
            f"({rc.get('value'):.2f} ‚â§ {rc.get('threshold')})",
            f"{_fmt_bool(kc.get('passed', False))} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π "
            f"{kc.get('count_ok')}/{kc.get('required')}",
        ]

        # –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É—Ä–æ–≤–Ω—è
        try:
            from charting import render_level_chart
            symbol = info.get("symbol")
            timeframe = info.get("timeframe", "15m")

            if symbol and self.data_manager is not None and self.resistance_analyzer is not None:
                min_days = getattr(self.cfg, "MIN_HISTORY_DAYS", 7)
                df = self.data_manager.fetch_klines_full(symbol, timeframe, min_days)
                if df is not None and not df.empty:
                    # –¥–ª—è SHORT –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–æ resistance_analyzer –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ support_analyzer
                    # –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º resistance_analyzer –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
                    levels_info = self.resistance_analyzer.find_resistance_levels(df, symbol)
                    if isinstance(levels_info, dict):
                        levels = (
                            levels_info.get('combined')
                            or levels_info.get('historical_peaks')
                            or levels_info.get('horizontal_zones')
                            or []
                        )
                    else:
                        levels = []

                    breakdown_info = {
                        "breakout_price": (
                            info.get("breakdown_price") or
                            info.get("price")
                        ),
                        "ts": info.get("ts") or info.get("time"),
                        "direction": "down"
                    }
                    max_bars = int(getattr(self.cfg, "SUMMARY_CHART_MAX_BARS", 220))
                    img_bytes = render_level_chart(
                        df=df,
                        levels=levels,
                        symbol=symbol,
                        timeframe=timeframe,
                        breakout=breakdown_info,
                        max_bars=max_bars,
                    )

                    caption = f"üìå {symbol} ({timeframe}) ‚Äî —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–±–æ—è –í–ù–ò–ó (SHORT)"
                    self._send_tg_photo(caption=caption, photo_bytes=img_bytes, filename=f"{symbol}_{timeframe}_breakdown.png")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞ SHORT")

        self._send_tg("\n".join(lines))

