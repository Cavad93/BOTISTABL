from __future__ import annotations
import csv
import json
import logging
import os
from dataclasses import dataclass, fields
from datetime import datetime
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)


@dataclass
class Position:
    symbol: str
    qty: float
    entry_price: float
    entry_time: datetime
    stop_loss: float
    take_profit: float
    partial_tps: List[float]
    partial_sizes: List[float]
    filled_partials: List[bool]
    status: str = "ACTIVE"
    ml_features: Optional[Dict[str, float]] = None
    ml_pred: Optional[float] = None
    direction: str = "LONG"  # –ù–û–í–û–ï –ü–û–õ–ï: "LONG" –∏–ª–∏ "SHORT"         # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ML –Ω–∞ –≤—Ö–æ–¥–µ (–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç)


class TradingEngine:
    """
    –î–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π, —É–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ TP, —Ç—Ä–µ–π–ª–∏–Ω–≥–æ–º –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –≤—ã—Ö–æ–¥–∞–º–∏.
    –ü–µ—Ä—Å–∏—Å—Ç–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ JSON, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å —Ä–µ—Å—Ç–∞—Ä—Ç—ã (PAPER/LIVE).
    –í—ã–∑—ã–≤–∞–µ—Ç on_position_closed(pos, success: bool), –≥–¥–µ success=True –¥–ª—è TP –∏ False –¥–ª—è SL ‚Äî
    —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è ARF —Å –º–µ—Ç–∫–æ–π —É—Å–ø–µ—Ö–∞/–Ω–µ—É—Å–ø–µ—Ö–∞.
    """

    def __init__(self, config, data_manager, risk_manager, notifier=None):
        self.cfg = config
        self.dm = data_manager
        self.rm = risk_manager
        self.notifier = notifier

        self.positions: List[Position] = []
        self.on_position_closed = None  # –∫–æ–ª–±—ç–∫: Callable[[Position, bool], None]

        self._load_positions_state()

    # ===== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞/—Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ =====

# –°–¢–ê–õ–û: trading_engine.py (–º–µ—Ç–æ–¥ –≤–Ω—É—Ç—Ä–∏ TradingEngine)

    def calculate_position_size(self, symbol: str, price: float) -> float:
        """
        –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫—É: RISK_PER_TRADE_PERCENT –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –ø—Ä–∏ SL=STOP_LOSS_PERCENT.
        qty = (deposit * RISK_PER_TRADE_PERCENT) / (price * STOP_LOSS_PERCENT)
        """
        try:
            deposit = float(self.dm.get_account_balance("USDT")) or float(self.cfg.DEFAULT_DEPOSIT_USDT)
        except Exception:
            deposit = float(getattr(self.cfg, "DEFAULT_DEPOSIT_USDT", 0.0))

        risk_frac = float(getattr(self.cfg, "RISK_PER_TRADE_PERCENT", 0.0035))
        sl_frac = float(getattr(self.cfg, "STOP_LOSS_PERCENT", 0.02))
        if price <= 0 or sl_frac <= 0 or risk_frac <= 0 or deposit <= 0:
            return 0.0

        risk_usdt = deposit * risk_frac
        qty = risk_usdt / (price * sl_frac)
        return round(qty, 6)


    def can_open_new_position(self) -> bool:
        max_positions = int(getattr(self.cfg, "MAX_CONCURRENT_POSITIONS", 3))
        active = sum(1 for p in self.positions if p.status == "ACTIVE")
        return active < max_positions

    def portfolio_risk_check(self) -> bool:
        """
        –§–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–≤–æ–∫—É–ø–Ω–æ–π –∞–ª–ª–æ–∫–∞—Ü–∏–∏.
        """
        try:
            deposit = float(self.dm.get_account_balance("USDT")) or float(self.cfg.DEFAULT_DEPOSIT_USDT)
        except Exception:
            deposit = float(getattr(self.cfg, "DEFAULT_DEPOSIT_USDT", 0.0))

        if deposit <= 0:
            return True

        total_alloc = sum(p.qty * p.entry_price for p in self.positions if p.status == "ACTIVE")
        max_frac = float(getattr(self.cfg, "PORTFOLIO_MAX_NOTIONAL", 0.8))
        return (total_alloc / deposit) <= max_frac

    # ===== –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é =====

    def execute_entry(
        self,
        breakout_info: Dict,
        ml_features: Optional[Dict[str, float]] = None,
        ml_pred: Optional[float] = None,
    ) -> Optional[Position]:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é (LONG –∏–ª–∏ SHORT), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ state.
        –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ breakout_info['direction'].
        """
        if not self.can_open_new_position() or not self.portfolio_risk_check():
            logger.warning("–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞/–∫–æ–ª-–≤–∞ –ø–æ–∑–∏—Ü–∏–π")
            return None

        symbol = breakout_info["symbol"]
        price = float(self.dm.get_current_price(symbol))
        qty = self.calculate_position_size(symbol, price)
        if qty <= 0:
            logger.warning("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–∏–ª—Å—è 0 ‚Äî –≤—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")
            return None

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: LONG (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ SHORT
        direction = str(breakout_info.get("direction", "LONG")).upper()
        
        paper = str(getattr(self.cfg, "TRADING_MODE", "PAPER")).upper() != "LIVE"
        
        # –¥–ª—è SHORT –æ—Ç–∫—Ä—ã–≤–∞–µ–º SELL –æ—Ä–¥–µ—Ä
        side = "SELL" if direction == "SHORT" else "BUY"
        order = self.dm.place_market_order(symbol, side, qty, paper=paper)
        if not order:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –≤—Ö–æ–¥ ({side})")
            return None

        pos = Position(
            symbol=symbol,
            qty=qty,
            entry_price=price,
            entry_time=datetime.now(),
            stop_loss=float(breakout_info["stop_loss"]),
            take_profit=float(breakout_info["take_profit"]),
            partial_tps=list(getattr(self.cfg, "PARTIAL_TPS", [])),
            partial_sizes=list(getattr(self.cfg, "PARTIAL_TP_SIZES", [])),
            filled_partials=[False] * len(getattr(self.cfg, "PARTIAL_TP_SIZES", [])),
            ml_features=ml_features,
            ml_pred=ml_pred,
            direction=direction,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        )
        self.positions.append(pos)
        self._save_positions_state()

        emoji = "üìâ" if direction == "SHORT" else "üìà"
        logger.info(f"{emoji} –û—Ç–∫—Ä—ã—Ç–∞ {direction} –ø–æ–∑–∏—Ü–∏—è: {symbol} qty={qty} @ {price:.6f}")
        if self.notifier:
            try:
                self.notifier.notify_trade_opened(pos)
            except Exception:
                logger.exception("notify_trade_opened failed")

        return pos

    # ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ =====

    def manage_positions(self):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏: —á–∞—Å—Ç–∏—á–Ω—ã–µ TP, —Ç—Ä–µ–π–ª–∏–Ω–≥, SL/TP –∑–∞–∫—Ä—ã—Ç–∏—è.
        –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç LONG –∏ SHORT –ø–æ–∑–∏—Ü–∏–∏.
        """
        paper = str(getattr(self.cfg, "TRADING_MODE", "PAPER")).upper() != "LIVE"

        for pos in list(self.positions):
            if pos.status != "ACTIVE":
                continue

            current = float(self.dm.get_current_price(pos.symbol))
            direction = getattr(pos, "direction", "LONG").upper()

            # ===== –ß–∞—Å—Ç–∏—á–Ω—ã–µ TP =====
            for i, (thr, share) in enumerate(zip(pos.partial_tps, pos.partial_sizes)):
                # –¥–ª—è LONG: TP –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –í–´–®–ï –≤—Ö–æ–¥–∞
                # –¥–ª—è SHORT: TP –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ù–ò–ñ–ï –≤—Ö–æ–¥–∞
                tp_triggered = False
                if direction == "LONG":
                    tp_triggered = current >= pos.entry_price * (1.0 + float(thr))
                else:  # SHORT
                    tp_triggered = current <= pos.entry_price * (1.0 - float(thr))
                
                if not pos.filled_partials[i] and tp_triggered:
                    # –¥–ª—è LONG —á–∞—Å—Ç–∏—á–Ω–æ SELL, –¥–ª—è SHORT —á–∞—Å—Ç–∏—á–Ω–æ BUY
                    close_side = "SELL" if direction == "LONG" else "BUY"
                    sell_qty = round(pos.qty * float(share), 6)
                    if sell_qty > 0:
                        self.dm.place_market_order(pos.symbol, close_side, sell_qty, paper=paper)
                        pos.qty = max(0.0, round(pos.qty - sell_qty, 6))
                        pos.filled_partials[i] = True
                        self._save_positions_state()
                        sign = "+" if direction == "LONG" else "-"
                        logger.info(f"‚öñÔ∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è {pos.symbol} ({direction}): {share*100:.0f}% @ {sign}{thr*100:.1f}% (rem={pos.qty:.6f})")
                        if self.notifier:
                            try:
                                self.notifier.notify_partial_tp(pos, float(thr), sell_qty, current)
                            except Exception:
                                logger.exception("notify_partial_tp failed")

            # ===== –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø =====
            trailing_start = float(getattr(self.cfg, "TRAILING_START", 0.0))
            trailing_step = float(getattr(self.cfg, "TRAILING_STEP", 0.0))
            if trailing_start > 0 and trailing_step > 0:
                if direction == "LONG":
                    gain = (current - pos.entry_price) / pos.entry_price
                    if gain >= trailing_start:
                        new_sl = max(pos.stop_loss, current * (1.0 - trailing_step))
                        if new_sl > pos.stop_loss:
                            pos.stop_loss = float(new_sl)
                            self._save_positions_state()
                            logger.info(f"üîß –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ–¥—Ç—è–Ω—É—Ç (LONG): {pos.symbol} SL={pos.stop_loss:.6f}")
                            if self.notifier:
                                try:
                                    self.notifier.notify_trailing(pos)
                                except Exception:
                                    logger.exception("notify_trailing failed")
                else:  # SHORT
                    gain = (pos.entry_price - current) / pos.entry_price
                    if gain >= trailing_start:
                        new_sl = min(pos.stop_loss, current * (1.0 + trailing_step))
                        if new_sl < pos.stop_loss:
                            pos.stop_loss = float(new_sl)
                            self._save_positions_state()
                            logger.info(f"üîß –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ–¥—Ç—è–Ω—É—Ç (SHORT): {pos.symbol} SL={pos.stop_loss:.6f}")
                            if self.notifier:
                                try:
                                    self.notifier.notify_trailing(pos)
                                except Exception:
                                    logger.exception("notify_trailing failed")

            # ===== SL / TP ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥—ã =====
            if direction == "LONG":
                if current <= pos.stop_loss:
                    self._final_close(pos, reason="STOP", paper=paper)
                elif current >= pos.take_profit:
                    self._final_close(pos, reason="TP", paper=paper)
            else:  # SHORT
                if current >= pos.stop_loss:
                    self._final_close(pos, reason="STOP", paper=paper)
                elif current <= pos.take_profit:
                    self._final_close(pos, reason="TP", paper=paper)

    def _final_close(self, pos: Position, reason: str, paper: bool):
        """
        –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è (TP/SL). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç LONG –∏ SHORT.
        """
        exit_price: Optional[float] = None
        closed_qty: float = float(pos.qty)
        direction = getattr(pos, "direction", "LONG").upper()

        try:
            if pos.qty > 0:
                # –¥–ª—è LONG –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ SELL, –¥–ª—è SHORT —á–µ—Ä–µ–∑ BUY
                close_side = "SELL" if direction == "LONG" else "BUY"
                order = self.dm.place_market_order(pos.symbol, close_side, pos.qty, paper=paper)
                
                try:
                    if isinstance(order, dict):
                        fills = order.get("fills") or []
                        if fills and "price" in fills[0]:
                            exit_price = float(fills[0]["price"])
                except Exception:
                    exit_price = None
                
                if not exit_price or exit_price <= 0:
                    exit_price = float(self.dm.get_current_price(pos.symbol))
                pos.qty = 0.0
        except Exception:
            logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {close_side} –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏")

        if reason == "TP":
            pos.status = "PROFIT"
            success = True
            log_fn = logger.info
            log_msg = f"‚úÖ Take-Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {pos.symbol} ({direction})"
        else:
            pos.status = "STOPPED"
            success = False
            log_fn = logger.warning
            log_msg = f"‚ùå Stop-Loss —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {pos.symbol} ({direction})"

        try:
            self._append_trade_result(pos, reason, exit_price, closed_qty)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –≤ CSV")

        self._save_positions_state()
        log_fn(log_msg)

        if self.notifier:
            try:
                self.notifier.notify_closed(pos, reason)
            except Exception:
                logger.exception("notify_closed failed")

        cb = getattr(self, "on_position_closed", None)
        if callable(cb):
            try:
                cb(pos, success)
            except Exception:
                logger.exception("on_position_closed callback failed")


    # ===== –ü–µ—Ä—Å–∏—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π =====
    def _trades_log_path(self) -> str:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø—É—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é state/trades.csv
        return str(getattr(self.cfg, "TRADES_LOG_PATH", os.path.join("state", "trades.csv")))

    def _append_trade_result(self, pos: Position, reason: str, exit_price: Optional[float], closed_qty: float):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ CSV-–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç LONG –∏ SHORT.
        """
        path = self._trades_log_path()
        try:
            os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ª–æ–≥–∞ —Å–¥–µ–ª–æ–∫")

        exit_px = float(exit_price) if exit_price else float(self.dm.get_current_price(pos.symbol))
        entry_px = float(pos.entry_price)
        qty = float(closed_qty)
        direction = getattr(pos, "direction", "LONG").upper()
        
        # —Ä–∞—Å—á—ë—Ç PnL —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if direction == "LONG":
            pnl_usdt = (exit_px - entry_px) * qty
            pnl_pct = (exit_px / entry_px - 1.0) * 100.0
        else:  # SHORT
            pnl_usdt = (entry_px - exit_px) * qty
            pnl_pct = (entry_px / exit_px - 1.0) * 100.0

        duration_sec = None
        try:
            if isinstance(pos.entry_time, datetime):
                duration_sec = int((datetime.now() - pos.entry_time).total_seconds())
        except Exception:
            duration_sec = None

        row = {
            "close_time": datetime.now().isoformat(timespec="seconds"),
            "symbol": pos.symbol,
            "direction": direction,  # –ù–û–í–û–ï –ü–û–õ–ï
            "reason": reason,
            "qty": f"{qty:.6f}",
            "entry_price": f"{entry_px:.6f}",
            "exit_price": f"{exit_px:.6f}",
            "pnl_usdt": f"{pnl_usdt:.6f}",
            "pnl_pct": f"{pnl_pct:.4f}",
            "duration_sec": duration_sec if duration_sec is not None else "",
            "ml_pred": f"{float(pos.ml_pred):.6f}" if getattr(pos, "ml_pred", None) is not None else "",
        }

        write_header = not os.path.isfile(path) or os.path.getsize(path) == 0
        try:
            with open(path, "a", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(
                    f,
                    fieldnames=[
                        "close_time","symbol","direction","reason","qty",  # direction –¥–æ–±–∞–≤–ª–µ–Ω
                        "entry_price","exit_price","pnl_usdt","pnl_pct",
                        "duration_sec","ml_pred",
                    ],
                )
                if write_header:
                    writer.writeheader()
                writer.writerow(row)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {row}")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–ø–∏—Å–∞—Ç—å CSV-–ª–æ–≥ —Å–¥–µ–ª–æ–∫")


    def _positions_state_path(self) -> str:
        return str(getattr(self.cfg, "POSITIONS_STATE_PATH", os.path.join("state", "positions.json")))

    def _ensure_state_dir(self):
        try:
            directory = os.path.dirname(self._positions_state_path()) or "."
            os.makedirs(directory, exist_ok=True)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è state")

    def _serialize_pos(self, pos: Position) -> Dict:
        d = {f.name: getattr(pos, f.name) for f in fields(Position)}
        # datetime ‚Üí ISO
        et = d.get("entry_time")
        if isinstance(et, datetime):
            d["entry_time"] = et.isoformat()
        return d

    def _deserialize_pos(self, d: Dict) -> Position:
        """
        –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dataclass Position.
        –õ–∏—à–Ω–∏–µ –ø–æ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã—Ö state).
        """
        fnames = {f.name for f in fields(Position)}
        dd = dict(d)

        # ISO ‚Üí datetime
        et = dd.get("entry_time")
        if isinstance(et, str):
            try:
                dd["entry_time"] = datetime.fromisoformat(et)
            except Exception:
                dd["entry_time"] = datetime.now()

        # –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        kwargs = {k: dd[k] for k in dd.keys() if k in fnames}
        # –ë—ç–∫–∞–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—è–º
        kwargs.setdefault("status", "ACTIVE")
        kwargs.setdefault("ml_features", None)
        kwargs.setdefault("ml_pred", None)

        # –°–ø–∏—Å–∫–∏ –∑–∞—â–∏—Ç–∏–º –æ—Ç None
        kwargs["partial_tps"] = list(kwargs.get("partial_tps") or [])
        kwargs["partial_sizes"] = list(kwargs.get("partial_sizes") or [])
        fps = kwargs.get("filled_partials")
        if fps is None:
            kwargs["filled_partials"] = [False] * len(kwargs["partial_sizes"])
        else:
            kwargs["filled_partials"] = list(fps)

        return Position(**kwargs)

    def _save_positions_state(self):
        try:
            self._ensure_state_dir()
            payload = {"positions": [self._serialize_pos(p) for p in self.positions]}
            tmp = self._positions_state_path() + ".tmp"
            with open(tmp, "w", encoding="utf-8") as f:
                json.dump(payload, f, ensure_ascii=False, indent=2)
            os.replace(tmp, self._positions_state_path())
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å state –ø–æ–∑–∏—Ü–∏–π: {e}")

    def _load_positions_state(self):
        try:
            path = self._positions_state_path()
            if not os.path.isfile(path):
                return
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            loaded: List[Position] = []
            for item in data.get("positions", []):
                try:
                    loaded.append(self._deserialize_pos(item))
                except Exception:
                    logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ state")
            if loaded:
                self.positions = loaded
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –∏–∑ state: {len(self.positions)}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å state –ø–æ–∑–∏—Ü–∏–π: {e}")
