# -*- coding: utf-8 -*-
from __future__ import annotations

import os
# —Ñ–∏–∫—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç matplotlib –¥–æ charting.py
os.environ.setdefault("MPLBACKEND", "Agg")

import hashlib
import logging
import signal
import threading
import time
from datetime import datetime
from typing import Dict, List, Optional
from charting import render_level_chart


import schedule
from dotenv import load_dotenv

# .env –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –î–û —Å–æ–∑–¥–∞–Ω–∏—è Config
load_dotenv()

from config import Config
from data_manager import DataManager
from resistance_analyzer import ResistanceAnalyzer
from breakout_detector import BreakoutDetector
from market_scanner import MarketScanner
from trading_engine import TradingEngine
from risk_manager import RiskManager
from notifier import Notifier
from websocket_streams import WebsocketStreams

# === ML (–æ–Ω–ª–∞–π–Ω-ARF) ===
from ml_arf import ARFModel, extract_numeric_features


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="-%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger(__name__)


class BreakoutTradingBot:
    def __init__(self):
        self.config = Config()

        # Core services
        self.data_manager = DataManager(self.config.API_KEY, self.config.API_SECRET, self.config)

        # —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π ‚Äî –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è Notifier
        self.resistance_analyzer = ResistanceAnalyzer(self.config)

        # —Ç–µ–ø–µ—Ä—å Notifier –º–æ–∂–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.notifier = Notifier(
            self.config,
            data_manager=self.data_manager,
            resistance_analyzer=self.resistance_analyzer
        )

        # ML: –æ–Ω–ª–∞–π–Ω-–ª–µ—Å, –ø–µ—Ä–µ–∂–∏–≤–∞—é—â–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç
        self.arf = ARFModel(self.config)

        self.breakout_detector = BreakoutDetector(
            self.config,
            self.data_manager,
            notifier=self.notifier,
            arf_model=self.arf,
        )
        self.market_scanner = MarketScanner(
            self.config, self.data_manager, self.resistance_analyzer, self.breakout_detector
        )
        self.risk_manager = RiskManager(self.config, self.data_manager)
        self.engine = TradingEngine(self.config, self.data_manager, self.risk_manager, self.notifier)
        self.ws = WebsocketStreams(self.config, self.data_manager)
        self.engine.on_position_closed = self._on_position_closed  # callback(success: bool)

        self.is_running = False
        self._sched_thread: Optional[threading.Thread] = None
        self._last_top_hash: Optional[str] = None  # –∞–Ω—Ç–∏-—Å–ø–∞–º –≤ Telegram

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    # ====== –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ======

    def start(self):
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.is_running = True

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
        try:
            if hasattr(self.notifier, "startup"):
                self.notifier.startup()
            elif hasattr(self.notifier, "_send_tg"):
                self.notifier._send_tg("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ")

        # –≤–µ–±—Å–æ–∫–µ—Ç—ã
        try:
            self.ws.start()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±—Å–æ–∫–µ—Ç–æ–≤")

        # –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–æ–≥–æ–Ω
        self.scan_and_analyze()

        # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        schedule.every(self.config.SCAN_INTERVAL).seconds.do(self.scan_and_analyze)
        schedule.every(self.config.LEVEL_UPDATE_INTERVAL).seconds.do(self.update_resistance_levels)
        schedule.every(self.config.MANAGE_POSITIONS_INTERVAL).seconds.do(self.engine.manage_positions)

        # –ù–ï daemon ‚Äî –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
        self._sched_thread = threading.Thread(target=self._run_schedule, name="SchedulerLoop", daemon=False)
        self._sched_thread.start()

        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        # —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
        try:
            while self.is_running:
                time.sleep(0.5)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        finally:
            self.stop()
            if self._sched_thread and self._sched_thread.is_alive():
                self._sched_thread.join(timeout=5)

    def stop(self):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.is_running = False
        try:
            schedule.clear()
        except Exception:
            from error_logger import log_exception
            log_exception("Error in stop")
        try:
            self.ws.stop()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Å–æ–∫–µ—Ç–æ–≤")

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ML-–º–æ–¥–µ–ª—å
        try:
            self.arf.save_now()
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ARF-–º–æ–¥–µ–ª—å –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        try:
            if hasattr(self.notifier, "shutdown"):
                self.notifier.shutdown()
            elif hasattr(self.notifier, "_send_tg"):
                self.notifier._send_tg("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")

        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # ====== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ======

    def _run_schedule(self):
        while self.is_running:
            try:
                schedule.run_pending()
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")
            time.sleep(1)

    # ====== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ======

    def scan_and_analyze(self):
        try:
            logger.info("=" * 50)
            logger.info("–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
            opportunities = self.market_scanner.scan_market()

            if opportunities:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                for opp in opportunities[:5]:
                    self._process_opportunity(opp)
            else:
                logger.info("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            summary = self.market_scanner.get_market_summary()
            self._log_market_summary(summary)
            self._maybe_notify_summary(summary)

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")

    def _build_ml_features(self, opportunity: Dict) -> Dict[str, float]:
        """
        –ó–∞–±–∏—Ä–∞–µ–º –í–°–ï —á–∏—Å–ª–æ–≤—ã–µ —Ñ–∏—á–∏ –∏–∑ —Ç–µ—Ö –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Ä–∞–µ—Ç—Å—è score:
        - —Å–∞–º score
        - breakout_info (–≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
        - levels[0] (–≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
        """
        feats: Dict[str, float] = {}

        # score –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫
        try:
            feats["score"] = float(opportunity.get("score", 0.0))
        except Exception:
            feats["score"] = 0.0

        # breakout_info
        bi = opportunity.get("breakout_info") or {}
        feats.update(extract_numeric_features(bi, "brk_"))

        # –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ levels
        levels = opportunity.get("levels") or []
        if isinstance(levels, list) and levels:
            top = levels[0]
            if isinstance(top, dict):
                feats.update(extract_numeric_features(top, "lvl_"))

        # —á–∏—Å—Ç–∏–º NaN/inf
        for k, v in list(feats.items()):
            if v != v or v in (float("inf"), float("-inf")):
                feats[k] = 0.0

        return feats

    def _process_opportunity(self, opportunity: Dict):
        symbol = opportunity["symbol"]
        tf = opportunity.get("timeframe")
        score = float(opportunity.get("score", 0.0))

        # ML-–≥–µ–π—Ç–∏–Ω–≥ —Å –ø—Ä–æ–≥—Ä–µ–≤–æ–º
        feats = self._build_ml_features(opportunity)
        p_ml = self.arf.predict_proba(feats)
        logger.info(f"\nüéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {symbol} ({tf}) | score={score:.1f} | ARF p_success={p_ml:.3f}")

        breakout = opportunity.get("breakout_info")
        thr = float(getattr(self.config, "ARF_ENTRY_PROBA", 0.62))

        warm_min = int(getattr(self.config, "ARF_WARMUP_LABELS", 50))
        use_ml_gate = self.arf.is_warm(warm_min)

        if breakout and (not use_ml_gate or p_ml >= thr):
            ok, reason = self._validate_and_open(breakout, ml_features=feats, ml_pred=p_ml)
            if ok:
                logger.info("  ‚úÖ –ü—Ä–æ–±–æ–π –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞")
                try:
                    self.ws.subscribe_symbol(symbol)
                except Exception:
                    logger.exception(f"WebSocket –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol} –Ω–µ —É–¥–∞–ª–∞—Å—å")
            else:
                logger.warning(f"  ‚ùå –ü—Ä–æ–±–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω: {reason}")
        else:
            if breakout and use_ml_gate:
                logger.info(f"  ‚è∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ ARF-–≥–µ–π—Ç–æ–º (p={p_ml:.3f} < {thr:.3f})")
            else:
                levels = opportunity.get("levels") or []
                if levels and isinstance(levels[0], dict):
                    level = levels[0]
                    dist = float(level.get("distance_percent", 0.0))
                    strength = float(level.get("strength", 0.0))
                    try:
                        lp = float(level["price"])
                    except Exception:
                        lp = 0.0
                    logger.info(
                        f"  –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å: {lp:.4f} ({dist:.2f}% –æ—Ç —Ü–µ–Ω—ã) | —Å–∏–ª–∞={strength:.2f}"
                    )

        logger.info(
            f"  ARF gate: {'ON' if use_ml_gate else 'WARMUP-OFF'} | "
            f"labels={self.arf.labels_seen()} | thr={thr:.3f} | p={p_ml:.3f}"
        )


    def _validate_and_open(
        self,
        breakout: Dict,
        ml_features: Optional[Dict[str, float]] = None,
        ml_pred: Optional[float] = None,
    ):
        symbol = breakout.get("symbol")

        # –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è / –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        try:
            active_symbols = [p.symbol for p in self.engine.positions if getattr(p, "status", "") == "ACTIVE"]
        except Exception:
            active_symbols = []

        try:
            if not self.risk_manager.correlation_check(symbol, active_symbols):
                return False, "–í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º"
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"

        # –≤—Ö–æ–¥
        try:
            pos = self.engine.execute_entry(breakout, ml_features=ml_features, ml_pred=ml_pred)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"

        if pos is None:
            return False, "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏"
        return True, "OK"

    def update_resistance_levels(self):
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è...")
        try:
            symbols = {p.symbol for p in self.engine.positions if getattr(p, "status", "") == "ACTIVE"}
        except Exception:
            symbols = set()

        for symbol in symbols:
            for timeframe in self.config.TIMEFRAMES:
                try:
                    df = self.data_manager.fetch_klines_full(symbol, timeframe, self.config.MIN_HISTORY_DAYS)
                    if df.empty:
                        continue
                    levels = self.resistance_analyzer.find_resistance_levels(df, symbol)
                    self.resistance_analyzer.levels_cache[f"{symbol}_{timeframe}"] = levels
                except Exception:
                    logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–ª—è {symbol} {timeframe}")

    # ====== –õ–æ–≥–∏/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ======

    def _log_market_summary(self, summary: Dict):
            logger.info("\nüìä –°–í–û–î–ö–ê –ü–û –†–´–ù–ö–£:")
            logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {summary.get('total_analyzed')}")
            logger.info(f"–° —É—Ä–æ–≤–Ω—è–º–∏: {summary.get('coins_with_levels')}")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤: {summary.get('active_breakouts')}")
            logger.info(f"–°–∏–ª–∞ —Ä—ã–Ω–∫–∞: {summary.get('market_strength')}")
            top = summary.get("top_opportunities") or []
            if top:
                logger.info("\nüéØ –¢–û–ü –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
                lines: List[str] = []
                for i, opp in enumerate(top[:5], 1):
                    bi = opp.get('breakout_info') or {}
                    p = bi.get('arf_proba')
                    if p is not None:
                        lines.append(
                            f"{i}. {opp['symbol']} ({opp.get('timeframe','')}) - "
                            f"ARF p={float(p):.3f}, Action: {opp.get('action','')}"
                        )
                    else:
                        lines.append(
                            f"{i}. {opp['symbol']} ({opp.get('timeframe','')}) - "
                            f"Score: {opp.get('score', float('nan')):.1f}, Action: {opp.get('action','')}"
                        )
                if lines:
                    logger.info("\n".join(lines))


    def _maybe_notify_summary(self, summary: Dict):
        """–ê–Ω—Ç–∏-—Å–ø–∞–º: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ TG —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–ø –∏–∑–º–µ–Ω–∏–ª—Å—è; + –∞–ª—å–±–æ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É—Ä–æ–≤–Ω–µ–π."""
        try:
            payload = summary.get("top_opportunities") or []

            # –∫–ª—é—á —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–∞–Ω—Ç–∏-—Å–ø–∞–º) –ø–æ —Ç–æ–ø-10
            key_items = []
            for o in payload[:10]:
                p = o.get('arf_proba')
                metric = f"p={float(p):.2f}" if p is not None else f"s={float(o.get('score', 0)):.1f}"
                key_items.append(f"{o.get('symbol')}|{o.get('timeframe')}|{o.get('action')}|{metric}")
            key_str = ";".join(key_items)
            curr_hash = hashlib.sha1(key_str.encode("utf-8")).hexdigest()

            if curr_hash == getattr(self, "_last_top_hash", None):
                return

            self._last_top_hash = curr_hash

            # —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
            lines: List[str] = [
                "üìä –°–í–û–î–ö–ê –ü–û –†–´–ù–ö–£",
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {summary.get('total_analyzed')}",
                f"–° —É—Ä–æ–≤–Ω—è–º–∏: {summary.get('coins_with_levels')}",
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤: {summary.get('active_breakouts')}",
                f"–°–∏–ª–∞ —Ä—ã–Ω–∫–∞: {summary.get('market_strength')}",
                "üéØ –¢–û–ü –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:",
            ]
            for i, opp in enumerate(payload[:5], 1):
                lines.append(
                    f"{i}. {opp['symbol']} ({opp.get('timeframe','15m')}) - "
                    f"Score: {float(opp.get('score',0.0)):.1f}, Action: {opp.get('action','WATCH')}"
                )
            summary_text = "\n".join(lines)

            # –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –¢–û–ü-N –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (–∞–ª—å–±–æ–º)
            chart_images: List[bytes] = []
            try:
                from charting import render_level_chart
                top_n = int(getattr(self.config, "SUMMARY_CHART_TOPN", 5))
                max_bars = int(getattr(self.config, "SUMMARY_CHART_MAX_BARS", 220))

                for opp in payload[:top_n]:
                    symbol = opp.get('symbol')
                    timeframe = opp.get('timeframe', '15m')
                    if not symbol:
                        continue

                    df = self.data_manager.fetch_klines_full(symbol, timeframe, self.config.MIN_HISTORY_DAYS)
                    if df is None or df.empty:
                        continue

                    levels_info = self.resistance_analyzer.find_resistance_levels(df, symbol)
                    if isinstance(levels_info, dict):
                        levels = (
                            levels_info.get('combined')
                            or levels_info.get('historical_peaks')
                            or levels_info.get('horizontal_zones')
                            or []
                        )
                    else:
                        levels = []

                    breakout_info = opp.get('breakout_info')

                    img = render_level_chart(
                        df=df,
                        levels=levels,
                        symbol=symbol,
                        timeframe=timeframe,
                        breakout=breakout_info,
                        max_bars=max_bars,
                    )
                    chart_images.append(img)
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —Å–≤–æ–¥–∫–∏")

            # –æ—Ç–ø—Ä–∞–≤–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ ‚Äî –∞–ª—å–±–æ–º, –∏–Ω–∞—á–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            if hasattr(self.notifier, "market_summary_with_charts") and chart_images:
                self.notifier.market_summary_with_charts(summary_text, chart_images)
            elif hasattr(self.notifier, "market_summary"):
                self.notifier.market_summary(summary)
            elif hasattr(self.notifier, "_send_tg"):
                self.notifier._send_tg(summary_text)

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –≤ Telegram")


    # ====== ML online-learning callback ======

    def _on_position_closed(self, pos, success: bool):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è TradingEngine –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏.
        success=True –¥–ª—è TP, False –¥–ª—è SL. –£—á–∏–º ARF –æ–Ω–ª–∞–π–Ω.
        """
        try:
            x = getattr(pos, "ml_features", None) or {}
            if x:
                y = 1 if success else 0
                self.arf.learn(x, y)
                logger.info(f"[ARF] online-learn: y={y} | features={len(x)}")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è ARF")


def _setup_signals(bot: BreakoutTradingBot):
    def handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è...")
        bot.stop()

    try:
        signal.signal(signal.SIGTERM, handler)
        signal.signal(signal.SIGINT, handler)
    except Exception:
        # Windows –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å SIGTERM
        pass


def main():
    print(
        """    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë     BREAKOUT TRADING BOT v2.0           ‚ïë
    ‚ïë     Binance Resistance Scanner           ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    )
    bot = BreakoutTradingBot()
    _setup_signals(bot)
    try:
        bot.start()
    except Exception:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ")
        try:
            bot.stop()
        except Exception:
            from error_logger import log_exception
            log_exception("Error in main")


if __name__ == "__main__":
    main()
