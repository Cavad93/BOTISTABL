import logging
import time
import json
from datetime import datetime
from typing import Dict, List
import schedule
import threading

from config import Config
from data_manager import DataManager
from resistance_analyzer import ResistanceAnalyzer
from breakout_detector import BreakoutDetector
from market_scanner import MarketScanner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BreakoutTradingBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Breakout Trading Bot...")
        
        self.config = Config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_manager = DataManager(
            self.config.API_KEY,
            self.config.API_SECRET
        )
        
        self.resistance_analyzer = ResistanceAnalyzer(self.config)
        self.breakout_detector = BreakoutDetector(self.config, self.data_manager)
        self.market_scanner = MarketScanner(
            self.config,
            self.data_manager,
            self.resistance_analyzer,
            self.breakout_detector
        )
        
        self.active_positions = []
        self.trading_history = []
        self.is_running = False
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.is_running = True
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.scan_and_analyze()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule.every(self.config.SCAN_INTERVAL).seconds.do(self.scan_and_analyze)
        schedule.every(self.config.LEVEL_UPDATE_INTERVAL).seconds.do(self.update_resistance_levels)
        schedule.every(300).seconds.do(self.check_active_positions)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        schedule.every(3600).seconds.do(self.generate_report)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_thread = threading.Thread(target=self._run_schedule)
        bot_thread.daemon = True
        bot_thread.start()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        try:
            while self.is_running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.stop()
    
    def _run_schedule(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        while self.is_running:
            schedule.run_pending()
            time.sleep(1)
    
    def scan_and_analyze(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info("=" * 50)
            logger.info("–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            opportunities = self.market_scanner.scan_market()
            
            if opportunities:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                
                # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                for opp in opportunities[:5]:  # –¢–æ–ø-5
                    self._process_opportunity(opp)
            else:
                logger.info("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
            summary = self.market_scanner.get_market_summary()
            self._log_market_summary(summary)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    def _process_opportunity(self, opportunity: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        symbol = opportunity['symbol']
        score = opportunity['score']
        
        logger.info(f"\n{symbol}:")
        logger.info(f"  –û—Ü–µ–Ω–∫–∞: {score:.2f}/100")
        logger.info(f"  –¢–∞–π–º—Ñ—Ä–µ–π–º: {opportunity.get('timeframe', 'N/A')}")
        
        if opportunity.get('breakout_info'):
            breakout = opportunity['breakout_info']
            logger.info(f"  ‚ö° –ü–†–û–ë–û–ô –û–ë–ù–ê–†–£–ñ–ï–ù!")
            logger.info(f"    –£—Ä–æ–≤–µ–Ω—å: {breakout['level_price']:.4f}")
            logger.info(f"    –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {breakout['breakout_price']:.4f}")
            logger.info(f"    –û–±—ä–µ–º: {breakout['volume_surge']:.2f}x")
            logger.info(f"    RSI: {breakout['rsi']:.2f}")
            logger.info(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {breakout['confidence_score']:.2f}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–æ—è
            is_valid, reason = self.breakout_detector.validate_breakout_quality(breakout)
            
            if is_valid:
                logger.info(f"  ‚úÖ –ü—Ä–æ–±–æ–π –≤–∞–ª–∏–¥–µ–Ω, –≥–æ—Ç–æ–≤ –∫ –≤—Ö–æ–¥—É")
                self._execute_trade(breakout)
            else:
                logger.warning(f"  ‚ùå –ü—Ä–æ–±–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω: {reason}")
        else:
            if opportunity.get('levels'):
                level = opportunity['levels'][0]
                logger.info(f"  –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å: {level['price']:.4f} "
                          f"({level['distance_percent']:.2f}% –æ—Ç —Ü–µ–Ω—ã)")
                logger.info(f"  –°–∏–ª–∞ —É—Ä–æ–≤–Ω—è: {level['strength']:.2f}")
                logger.info(f"  –¢–∏–ø—ã: {', '.join(level.get('types', []))}")
    
    def _execute_trade(self, breakout_info: Dict):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ API
        
        if len(self.active_positions) >= self.config.MAX_CONCURRENT_POSITIONS:
            logger.warning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
        
        position = {
            'symbol': breakout_info['symbol'],
            'entry_price': breakout_info['entry_price'],
            'entry_time': datetime.now(),
            'stop_loss': breakout_info['stop_loss'],
            'take_profit': breakout_info['take_profit'],
            'confidence': breakout_info['confidence_score'],
            'status': 'ACTIVE'
        }
        
        self.active_positions.append(position)
        logger.info(f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {position['symbol']} @ {position['entry_price']:.4f}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.trading_history.append(position.copy())
    
    def check_active_positions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.active_positions:
            return
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(self.active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        
        for position in self.active_positions[:]:
            current_price = self.data_manager.get_current_price(position['symbol'])
            
            if current_price <= position['stop_loss']:
                logger.warning(f"‚ùå Stop-Loss —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {position['symbol']}")
                position['status'] = 'STOPPED'
                position['exit_price'] = current_price
                position['exit_time'] = datetime.now()
                self.active_positions.remove(position)
                
            elif current_price >= position['take_profit']:
                logger.info(f"‚úÖ Take-Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {position['symbol']}")
                position['status'] = 'PROFIT'
                position['exit_price'] = current_price
                position['exit_time'] = datetime.now()
                self.active_positions.remove(position)
            else:
                pnl_percent = ((current_price - position['entry_price']) / 
                              position['entry_price']) * 100
                logger.info(f"  {position['symbol']}: {pnl_percent:+.2f}%")
    
    def update_resistance_levels(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        for position in self.active_positions:
            symbol = position['symbol']
            
            for timeframe in self.config.TIMEFRAMES:
                df = self.data_manager.get_klines(symbol, timeframe, limit=500)
                if not df.empty:
                    levels = self.resistance_analyzer.find_resistance_levels(df, symbol)
                    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    self.resistance_analyzer.levels_cache[f"{symbol}_{timeframe}"] = levels
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞"""
        logger.info("\n" + "=" * 60)
        logger.info("–û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–ï –ë–û–¢–ê")
        logger.info("=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        total_trades = len(self.trading_history)
        profitable_trades = sum(1 for t in self.trading_history 
                               if t.get('status') == 'PROFIT')
        
        if total_trades > 0:
            win_rate = (profitable_trades / total_trades) * 100
            logger.info(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            logger.info(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades}")
            logger.info(f"Win Rate: {win_rate:.2f}%")
        
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.active_positions)}")
        
        # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if self.active_positions:
            logger.info("\n–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
            for pos in self.active_positions:
                current_price = self.data_manager.get_current_price(pos['symbol'])
                pnl = ((current_price - pos['entry_price']) / pos['entry_price']) * 100
                logger.info(f"  {pos['symbol']}: {pnl:+.2f}%")
        
        # –†—ã–Ω–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞
        summary = self.market_scanner.get_market_summary()
        logger.info(f"\n–°–∏–ª–∞ —Ä—ã–Ω–∫–∞: {summary['market_strength']}")
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤: {summary['active_breakouts']}")
        
        logger.info("=" * 60 + "\n")
    
    def _log_market_summary(self, summary: Dict):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä—ã–Ω–∫—É"""
        logger.info("\nüìä –°–í–û–î–ö–ê –ü–û –†–´–ù–ö–£:")
        logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {summary['total_analyzed']}")
        logger.info(f"–° —É—Ä–æ–≤–Ω—è–º–∏: {summary['coins_with_levels']}")
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤: {summary['active_breakouts']}")
        logger.info(f"–°–∏–ª–∞ —Ä—ã–Ω–∫–∞: {summary['market_strength']}")
        
        if summary['top_opportunities']:
            logger.info("\nüéØ –¢–û–ü –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
            for i, opp in enumerate(summary['top_opportunities'], 1):
                logger.info(f"{i}. {opp['symbol']} ({opp['timeframe']}) - "
                          f"Score: {opp['score']:.1f}, Action: {opp['action']}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.is_running = False
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        if self.active_positions:
            logger.info(f"–ó–∞–∫—Ä—ã—Ç–∏–µ {len(self.active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            for position in self.active_positions:
                position['status'] = 'CLOSED'
                position['exit_time'] = datetime.now()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_report()
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë     BREAKOUT TRADING BOT v1.0           ‚ïë
    ‚ïë     Binance Resistance Scanner           ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    bot = BreakoutTradingBot()
    
    try:
        bot.start()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.stop()

if __name__ == "__main__":
    main()
